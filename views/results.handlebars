<div style = "background-image: url('/images/testing.jpg'); height: 100%;">      

<!--add hamburger menu for scrollspy here-->
<div id="index-banner" class="parallax-container">

  <div class="dropdown">
    <i class="dropdown-trigger fa fa-bars fa-4x burger-menu" data-target='dropdown'></i>  
    <ul class="dropdown-content" id="dropdown">
      <li class="nav-item active">
        <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
      </li>
      {{#if loggedIn}}
      <li class="nav-item">
        <a class="nav-link" href="/user">Profile</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/logout">Log Out</a>
      </li>
      {{else}}
      <li class="nav-item">
        <a class="nav-link" href="/login">Log In</a>
      </li>
      {{/if}}
    </ul>
  </div>

  <div class="section section1 no-pad-bot">
    <div class="container">  
      
            <br><br>
    <div class= "container">
      <h1 class="center white-text">Star Scout</h1>
    </div>
      <div id="home">
        <div class="container float-text exoFont">
          <div class="section">
            <div class="row">
              <h3 class="center">Dark Sky Map</h3>
              <div id="map-canvas"></div>
              <div class="center" style="margin-top: 10px;">
                <img src='/images/lightlegend.jpg'>
              </div>

              <div class="col s12 center exoFont">
                <div class="card eventsCard horizontal">
                  <div class = "card-stacked">
                    <div class="card-content">
                    <h5 class="card-title" id='event-name'>{{resultMeteor.shower_name}}</h5>
                        <p id='latlon'></p>
                        <p id='start-date'>Start Date: {{resultMeteor.begin_date}}</p>
                        <p id='end-date'>End Date: {{resultMeteor.end_date}}</p>
                        <p id='max-date'>Maximum Date: {{resultMeteor.max_date}}</p>
                        <p id='max-rate'>Peak Meteors Per Hour: {{resultMeteor.max_rate_per_hour}}</p>
                        <p id='summary'></p>
                        <p id='temp'></p>
                        <p id='sunrise'></p>
                        <p id='sunset'></p>
                    </div>
                    <div class="card-action">
                        <button id="geolocate">Check here</button>
                    </div>    
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>  
    </div> 
  </div>  
</div> 

  <script>

// Geo Locate
let lat, lon;
if ('geolocation' in navigator) {
  console.log('geolocation available');
  navigator.geolocation.getCurrentPosition(async position => {
    let lat, lon, weather, forecast;
    try {
      lat = position.coords.latitude;
      lon = position.coords.longitude;
      //document.getElementById('latitude').textContent = lat.toFixed(2);
      document.getElementById('latlon').textContent = `latitude: ${lat}, longitude: ${lon}`;
      const api_url_camp = `/campgrounds/${lat},${lon}`
      const response_camp = await fetch(api_url_camp);
      const json_camp = await response_camp.json();
      let campgroundArray = new Array();
      for (let camp of json_camp) {
        let campgroundTemp = new Array();
        let campgroundName = camp.$.facilityName;
        let campgroundLat = camp.$.latitude;
        let campgroundLon = camp.$.longitude;
        let campgroundZ = 3;
        campgroundTemp.push(campgroundName)
        campgroundTemp.push(campgroundLat)
        campgroundTemp.push(campgroundLon)
        campgroundTemp.push(campgroundZ);
        campgroundArray.push(campgroundTemp);
      }
      setMarkers(map, campgroundArray);
      const api_url = `/weather/${lat},${lon}`;
      const response = await fetch(api_url);
      const json = await response.json();
      forecast = json.weather.daily;
      weather = json.weather.currently;
      document.getElementById('summary').textContent = `Weather Summary: ${weather.summary}`;
      document.getElementById('temp').textContent = `Temperature: ${weather.temperature}`;
      //document.getElementById('forecast').textContent = forecast.data[0].summary;
      document.getElementById('sunrise').textContent = `Sunrise: ${forecast.data[0].sunriseTime}`;
      document.getElementById('sunset').textContent = `Sunset: ${forecast.data[0].sunsetTime}`;
      //document.getElementById('moonphase').textContent = forecast.data[0].moonPhase;

    } catch (error) {
      console.log(error);
    }

    const data = { lat, lon, weather, forecast };
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    };
    const db_response = await fetch('/api', options);
    const db_json = await db_response.json();
    console.log(db_json);
  });
} else {
  console.log('geolocation not available');
}
</script>
<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
<script src="/js/materialize.js"></script>
<script src="/js/init.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
{{!-- <script>
    $('#geolocate').click(function() {
    var location = $("#location").val();
    if (location != '') {
      .ajax ({
        url: 'http://api.openweathermap.org/data/2.5/weather?q=' + location + '&units=imperial' + '560a44dd3a91049359b3ff212530bb7f',
        type: "GET",
        datatype: "jsonp",
        success: function(data) {
          console.log("weather" + data);
        }
      });

    } else {
      throw(err);
    }
  })
</script> --}}

